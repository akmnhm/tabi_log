// まりこさんの本から、汎用性高そうな箇所や
// 注意すべきと思われる箇所を抜粋します。
// fuelphpにうまくおつきあいしていこうという気持ち。
// まりこさん、本ありがとう。

//Controller 側
public function action_index() {
       $data = array();
       $data['name'] = 'ABS';
       return View::forge('members/top', $data);
}

//Controller 側2
public function action_index() {
       $view = View::forge('members/top');
       $view->name = 'ABS';
       return $view;
}

//Controller 側3
public function action_index() {
       $view = View::forge('members/top');
       $view->set('name', 'ABS');
       return $view;
}


//View側
<h1>ようこそ、<?php echo $name; ?>さん</h1>



//Controller 側
public function action_index() {
       $view = View::forge('members/top');
       $members = array();
       $members[] = array('id'=>1, 'name'=>'ABS');
       $members[] = array('id'=>2, 'name'=>'ABS');
       $members[] = array('id'=>3, 'name'=>'ABS');
       $view->set('members', $members);
       retunr $view;
}
//View側
<?php foreach($members as $member): ?>
      <tr>
      <td><?php echo sprintf("%05d", $members['id']); ?>
          <?php echo $members['name']; ?></td>
	</tr>
<?php endforeach; ?>


//Model_Crud クラス p85-p90
//データの検証ができる p90
Model_Crud を継承したクラスで、$_rulesプロパティにデータ検証規則の配列を指定しておくと、save()メソッド実行前に自動的に検証が行われる。
(例: ユーザ登録で、名前必須、email必須でかつ有効なメールアドレスの形式でなければならない、などというのを検証できる。)
//静的メソッド
forge(): インスタンスの作成
find_all(): 全データの取得
全レコード取得。各レコードのデータをオブジェクトに格納し、そのオブジェクトの配列を返す。
find_by_pk(): 主キーによるデータの取得
find(): 条件を指定したデータの取得
save(): データの保存
delete(): データの削除

//番外篇 サニタイジング
//ユーザがjavascript等のコードを入れたものをそのままehcoで出力すると
//<SCRIPT Language="JavaScript">alert("びっくり！");</SCRIPT>
//実際にアラートがでてしまうことに注意(とくにDB挿入時)
// サニタイジング >>
// http://itpro.nikkeibp.co.jp/article/MAG/20061122/254548/
// cf) SQL injection ..
$view = View::forge('members/top', array(), false);
$view->title = '<h1>メンバーページへようこそ！</h1>'
return $view;

$view = View::forge('members/top');
$view->title = '<f>';
$view->auto_filter(false);
return $view;


//Assetsのすすめ
// img等の外部ファイルは全てAssetsにいれること
// http://localhost/example
// 例えば <img src="./img/a.jpg">
// とすれば localhost/example/img/a.jpgへのアクセスが成功するが
// http://localhost/example/
// としたとき、 localhost/example//img/a.jpg にアクセスして
// 画像の表示がされなかったりする。
// これを回避するため、Assetsを推奨。
Assets::imag($1, $2, $3)
memo-> 一度に出力するならrendar
memo-> リソースがなくてもエラーをださない処理 p.74



//Presenterのすすめ p90
// viewはdraw関数
// 例えば 北海道を 0、青森を 1
// とするなら、変換する作業が必要だが、
// viewは表示するだけにすべき。
// そんなような作業をpresenterに担わせる。

//pagenation p.118

// postメソッドの脆弱性

//認証とセッション管理: p184-p220


//phpの基本的なこと
//クラスorプロパティのアクセス権 
http://php.net/manual/ja/language.oop5.visibility.php

public宣言されたメンバーには、どこからでもアクセス可能。
protected 宣言されたメンバーには、 そのクラス自身とそのクラスを継承したクラスからのみアクセス可能。
private 宣言されたメンバーには、そのメンバーを定義したクラスからのみアクセス可能。


//パスの書き方
URLが
http://localhost/~marikonakagawa/courseMngr/members/userpg/postlist/index
のときコントローラのクラスは Controller_Members_Userpg_Postlist で、メソッド名は action_index()
